package fes.aragon.codigo;

%%
%public
%class Lexico
%line
%char
%column
%type Tokens

%{
private boolean hayToken=false;
public boolean getHayToken(){
    return this.hayToken;
}
%}

%type Tokens

%init{
    /*Codigo que se ejecuta en el constructor de la clase*/
%init}

%eof{
    /*Codigo que se ejecuta al terminar el analisis*/
    this.hayToken=false;
%eof}

LetraA = "a"
LetraB = "b"
LetraC = "c"
LetraD = "d"
PuntoComa = ";"
Espacio = " "
saltoLinea = \n|\r

%%

{LetraA} {
    Tokens tok = new Tokens(yytext(), Sym.LETRA_A, yyline, yycolumn);
    this.hayToken = true;
    return tok;
}

{LetraB} {
    Tokens tok = new Tokens(yytext(), Sym.LETRA_B, yyline, yycolumn);
    this.hayToken = true;
    return tok;
}

{LetraC} {
    Tokens tok = new Tokens(yytext(), Sym.LETRA_C, yyline, yycolumn);
    this.hayToken = true;
    return tok;
}

{LetraD} {
    Tokens tok = new Tokens(yytext(), Sym.LETRA_D, yyline, yycolumn);
    this.hayToken = true;
    return tok;
}

{PuntoComa} {
    Tokens tok = new Tokens(yytext(), Sym.PUNTOCOMA, yyline, yycolumn);
    this.hayToken = true;
    return tok;
}

{Espacio} {
    // Ignorar espacios
}

{saltoLinea} {
    // Ignorar saltos de línea
}

. {
    String errLex = "Error léxico: '"+yytext()+"' en la línea: "
        + (yyline+1) + " y columna: " + (yycolumn+1);
    System.out.println(errLex);
    this.hayToken = false;
}